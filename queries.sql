-- creation of tables     

-- Customers Table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Email VARCHAR(100), 
    JoinDate DATE,
    Country VARCHAR(50)
);

-- Products Table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    Name VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10, 2),
    Stock INT
);

-- Orders Table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10, 2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Shipping Table
CREATE TABLE Shipping (
    ShippingID INT PRIMARY KEY,
    OrderID INT,
    ShippingDate DATE,
    DeliveryDate DATE,
    Status VARCHAR(50),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

-- Reviews Table
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    ProductID INT,
    CustomerID INT,
    Rating INT CHECK (Rating BETWEEN 1 AND 5),
    ReviewText TEXT,
    ReviewDate DATE,
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);


-- Insert Queries 

-- Insert data into Customers
INSERT INTO Customers (CustomerID, Name, Email, JoinDate, Country) VALUES
(1, 'Alice Johnson', 'alice@example.com', '2023-01-15', 'United States'),
(2, 'Bob Smith', 'bob@example.com', '2023-02-20', 'Canada'),
(3, 'Charlie Brown', 'charlie@example.com', '2023-03-05', 'United Kingdom');

-- Insert data into Products
INSERT INTO Products (ProductID, Name, Category, Price, Stock) VALUES
(1, 'Wireless Mouse', 'Electronics', 25.99, 150),
(2, 'Bluetooth Headphones', 'Electronics', 79.99, 100),
(3, 'Notebook', 'Stationery', 5.49, 300);

-- Insert data into Orders
INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
(1, 1, '2023-03-10', 51.98),
(2, 2, '2023-03-15', 79.99),
(3, 3, '2023-03-20', 16.47);

-- Insert data into Shipping
INSERT INTO Shipping (ShippingID, OrderID, ShippingDate, DeliveryDate, Status) VALUES
(1, 1, '2023-03-11', '2023-03-14', 'Delivered'),
(2, 2, '2023-03-16', '2023-03-20', 'Delivered'),
(3, 3, '2023-03-21', NULL, 'In Transit');

-- Insert data into Reviews
INSERT INTO Reviews (ReviewID, ProductID, CustomerID, Rating, ReviewText, ReviewDate) VALUES
(1, 1, 1, 5, 'Great product! Works perfectly.', '2023-03-12'),
(2, 2, 2, 4, 'Good sound quality, but a bit pricey.', '2023-03-18'),
(3, 3, 3, 3, 'Decent notebook, but paper quality could be better.', '2023-03-22');


-- Step 2: Questions

-- Basic Queries


-- 1. Retrieve the names and emails of all customers.
select Name , Email from Customers;

-- 2. List all products along with their categories and prices.

select Name , Category , Price from Products;

-- 3. Find the total number of products available in the 'Electronics' category.

select COUNT(Name) from Products where Category ="Electronics";

-- 4. Display all orders placed by customers from the 'United States.'
 select OrderID , Orders.CustomerID , OrderDate , TotalAmount 
 from Orders Join Customers 
 ON Orders.CustomerID = Customers.CustomerID 
 where Customers.Country="United States";

-- Intermediate Queries


-- 5. Calculate the total revenue generated from all orders.
select SUM(TotalAmount) from Orders;

-- 6. Find the name of the customer who placed the order with the highest total amount.

select Customers.Name ,SUM(TotalAmount) as HighestOrder ,Customers.CustomerID from Orders 
JOIN Customers 
ON Customers.CustomerID = Orders.CustomerID 
group by Customers.Name , Customers.CustomerID 
order by HighestOrder DESC
LIMIT 1 ;

-- 7. Retrieve all products that have less than 50 units in stock.
select * from Products where Stock<50;


-- 8. List all reviews with ratings of 4 or higher.

select * from Reviews where Rating >=4;

-- Joins


-- 9. Write a query to display all orders along with the customer name and email.
select  Orders.OrderID , Orders.CustomerID ,Customers.Name , Customers.Email , Orders.OrderDate , Orders.TotalAmount from  Orders JOIN Customers ON Customers.CustomerID = Orders.CustomerID;


-- 10. List all reviews along with the product name and customer name.

-- Aggregations
select Customers.Name as CustomerName ,Products.Name as ProductName , 
Rating , ReviewText , ReviewDate 
from Reviews Join Customers on 
Customers.CustomerID = Reviews.CustomerID  
Join Products ON Products.ProductID = Reviews.ReviewID ;

-- 11. Calculate the average rating for each product.
select Products.Name , Products.ProductID , AVG(Rating) from Products JOIN Reviews ON Products.ProductID= Reviews.ProductID group by Products.Name , Products.ProductID;

-- 12. Find the total revenue generated by each product category.
SELECT P.Category,SUM(O.TotalAmount) AS TotalRevenue
FROM Orders O
JOIN Products P 
ON ROUND(O.TotalAmount / P.Price) = O.TotalAmount / P.Price
GROUP BY  P.Category;


-- 13. Determine the country with the highest number of customers.
select  Country , COUNT(CustomerID) as CustomerPerCuntry from Customers group by country;
-- Filtering


-- 14. Retrieve all orders placed after March 1, 2023.
select * from Orders where OrderDate>'2023-03-01';

-- 15. Display all shipments that are still 'In Transit.'
select * from Shipping where Status = 'In Transit';
-- Advanced Queries


-- 16. Identify the top-rated product based on average rating.

 select Products.Name , Products.ProductID , AVG(Rating) as AvgRating from Products 
 JOIN Reviews ON Products.ProductID= Reviews.ProductID  
 group by Products.Name , Products.ProductID 
 order by AvgRating DESC LIMIT 1;


-- 17. List all customers who have written at least one review.
select Customers.Name ,Reviews. CustomerID , COUNT(Reviews.CustomerID) 
as ReviewCount from Customers 
JOIN Reviews ON Customers.CustomerID = Reviews.CustomerID 
group by CustomerID, Customers.Name 
having ReviewCount > 1;


-- 18. Find all products that have been purchased but never reviewed.

-- IN THIS WE ARE ASSUMING THAT A PRODUCT WHICH IS REVIEWED IS PURCHASED AS 
-- NO ONE CAN REVIEW PRODUCT WITHOUT PURCHASING IT SO IF SOME PRODUCT ID IS 
-- NOT IN THE REVIEW TABLE IT IS PURCHASED BUT NOT REVIEWED

SELECT ProductID, Name
FROM Products
WHERE ProductID NOT IN (
    SELECT DISTINCT ProductID FROM Reviews
);

-- 19. Write a query to find the product with the highest total sales (quantity * price).


-- IN THIS WE ARE ASSUMING THAT IF A PRODUCT COST * X GIVES EXACT TOTAL AMOUNT
-- WE GET THE ESTIMATE QTY SALE BUT ONLY ON EXACT MATCH !!


select P.ProductID,P.Name,SUM(O.TotalAmount) AS EstimatedTotalSales
FROM Orders O
JOIN Products P 
ON ROUND(O.TotalAmount / P.Price) = O.TotalAmount / P.Price
GROUP BY 
P.ProductID, P.Name
ORDER BY 
EstimatedTotalSales DESC
LIMIT 1;


-- 20. Retrieve all products that have not been purchased yet.

-- IN THIS WE ASSUME IF A PRODUCT IS REVIWED IT IS PURCHASED AS IT IS NOT POSSIBLE 
-- TO REVIEW A PRODUCT WITHOUT PURCHASING 

SELECT Name
FROM Products
WHERE ProductID NOT IN (
    SELECT DISTINCT ProductID
    FROM Reviews
);
